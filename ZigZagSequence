/*
Editor: JavaScript(Node.js)
STATUS: INCOMPLETE
*/

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   return processData(_input);
});

function processData(input) {
    //Enter your code here
    let t = input.substring(0, 1);
    let n = input.substring(2, 3);
    let aux = input.substring(4, input.length).split(' ').join('');
    let arr = Array.from(aux);
    const isWithinConstraints = (currentValue) => currentValue >= 1 && currentValue <= 1000000000;
    const aContraint = arr.every(isWithinConstraints)
    if (t >= 1 && t <= 20) {
        if (n >= 1 && n <= 10000 && n % 2 != 0) {
            if (aContraint) {
                return findZigZagSequence(t, n, arr);
            } else {
                console.log("Elements of array elements constraint violation (a)");
            }
        } else {
            console.log("Number of array elements constraint violation (n)");
        }
    } else {
        console.log("Test cases constraint violation (t)");
    }
}

function compareNumbers(a, b) {
    return a - b;
}

function findZigZagSequence(t, n, arr) {
    let arr1 = arr.slice(0, arr.length / 2);
    let arr2 = arr.slice(arr.length / 2, arr.length);
    arr1 = arr1.sort(compareNumbers); // [1, 5, 40, 200, 300]
    arr2 = (arr2.sort(compareNumbers)).reverse(); // [300, 200, 40, 5, 1]
    let resArr = ((arr1.concat(arr2)).toString()).replace(/,/g, ' ');
    return resArr;
}


/*
 console.trace('Show me'); 
 process.on('uncaughtException', (err, origin) => {
  fs.writeSync(
    process.stderr.fd,
    `Caught exception: ${err}\n` +
    `Exception origin: ${origin}`,
  );
});

process.on('warning', (warning) => {
  console.warn(warning.name);    // Print the warning name
  console.warn(warning.message); // Print the warning message
  console.warn(warning.stack);   // Print the stack trace
});

*/




