/*
Editor: JavaScript(Node.js)
*/


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');
    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'caesarCipher' function below.
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. STRING s
 *  2. INTEGER k
 */
const originalAlpha= ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];




function caesarCipher(s, k) {
    // Write your code here
// console.log("s: "+s+" k: "+k);
let auxOne= originalAlpha.slice(0,k);
let auxTwo= originalAlpha.slice(k, originalAlpha.length);
var rotatedAlpha = auxTwo.concat(auxOne);
var inputArr= s.split('');
var output=[];
let letter;
let index;

for(let i=0; i < inputArr.length; i++){
    let mayus=inputArr[i].toUpperCase(); 
    let minus=inputArr[i].toLowerCase();
    // console.log("mayus: "+mayus+" minus: "+minus);
    
if(inputArr[i].match(/[a-z]+/)){
  letter= rotatedAlpha.find(element => element == minus) ;
          index= rotatedAlpha.indexOf(letter); 
          output.push(rotatedAlpha[index+k].toLowerCase());
          console.log("minus: ", rotatedAlpha[index+k].toLowerCase());
}

 if(inputArr[i].match(/[A-Z]+/)){
      letter= rotatedAlpha.find(element => element == mayus) ;
           index= rotatedAlpha.indexOf(letter);
           output.push(rotatedAlpha[index+k].toUpperCase());
           console.log("mayus: ", rotatedAlpha[index+k].toUpperCase());
}
if(inputArr[i].match(/[|\\/~^:,;?!&%$-_'@*+]/)){
     output.push(inputArr[i]); 
         console.log("sign: ", inputArr[i]);
    
} 

    

}
// console.log("Output: ",output);
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);
    const n = parseInt(readLine().trim(), 10);
    const s = readLine();
    const k = parseInt(readLine().trim(), 10);
    const result = caesarCipher(s, k);
    ws.write(result + '\n');
    ws.end();
}

